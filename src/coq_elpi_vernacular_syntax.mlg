(* coq-elpi: Coq terms as the object language of elpi                        *)
(* license: GNU Lesser General Public License Version 2.1 or later           *)
(* ------------------------------------------------------------------------- *)

DECLARE PLUGIN "elpi_plugin"

{

open Stdarg
open Ltac_plugin

open Pcoq.Constr
open Pcoq.Prim

module EV = Coq_elpi_vernacular
module U = Coq_elpi_utils

(* Arguments ************************************************************* *)
let pr_elpi_string _ _ _ (s : Elpi.API.Ast.Loc.t * string) = Pp.str (snd s)

let trim_loc loc =
  let open Loc in
  { loc with bp = loc.bp + 1; ep = loc.ep - 1 }

let idents_of loc s =
  let s = String.sub s 1 (String.length s - 2) in
  let l = Str.(split (regexp "[\t \n]+") s) in
  List.iter (fun x -> if not (CLexer.is_ident x) then raise Stream.Failure) l;
  Coq_elpi_utils.of_coq_loc (trim_loc loc), l

let rec strip_curly loc s =
  if s.[0] = '\123' then strip_curly (trim_loc loc) String.(sub s 1 (length s - 2))
  else Coq_elpi_utils.of_coq_loc loc, s
let rec strip_round loc s =
  if s.[0] = '(' then strip_round (trim_loc loc) String.(sub s 1 (length s - 2))
  else Coq_elpi_utils.of_coq_loc loc, s
let rec strip_square loc s =
  if s.[0] = '[' then strip_square (trim_loc loc) String.(sub s 1 (length s - 2))
  else Coq_elpi_utils.of_coq_loc loc, s

}

ARGUMENT EXTEND elpi_string PRINTED BY { pr_elpi_string }
| [ "xxxxxxxx" ] -> { (Elpi.API.Ast.Loc.initial "dummy", "") }   (* XXX To be removed when maxime's patches gets merged *)
END
GRAMMAR EXTEND Gram GLOBAL: elpi_string;
elpi_string : [
  [ s = QUOTATION "lp:" -> {
    if s.[0] = '\123' then strip_curly loc s
    else if s.[0] = '(' then strip_round loc s
    else if s.[0] = '[' then strip_square loc s
    else Coq_elpi_utils.of_coq_loc loc, s
  }
  | s = STRING -> {
    Coq_elpi_utils.of_coq_loc loc, s
  }
  ]];
END

{
let pr_fp _ _ _ (_,x) = EV.pr_qualified_name x
let pp_elpi_loc _ _ _ (l : Loc.t) = Pp.str "TODO: elpi_loc"

let the_qname = ref ""
let any_qname _ strm =
  let re = Str.regexp "[A-Za-z][A-Za-z0-9]*\\(\\.?[A-Za-z][A-Za-z0-9]*\\)*" in
  match Stream.peek strm with
  | Some (Tok.KEYWORD sym) when Str.string_match re sym 0 -> Stream.junk strm; the_qname := sym
  | _ -> raise Stream.Failure
let any_qname = Pcoq.Entry.of_parser "any_qname" any_qname

}

ARGUMENT EXTEND qualified_name PRINTED BY { pr_fp }
END
GRAMMAR EXTEND Gram GLOBAL: qualified_name;
qualified_name :
  [ [ i = IDENT; s = LIST0 FIELD -> { loc, i :: s } | "_" -> { loc, [] }
    | any_qname -> { loc, Str.split_delim (Str.regexp_string ".") !the_qname } ]
  ];
END

ARGUMENT EXTEND elpi_loc
PRINTED BY { pp_elpi_loc }
| [ ] -> { loc }
END

(* Anti-quotation ******************************************************** *)
{
let pr_elpi_code _ _ _ (s : Elpi.API.Ast.Loc.t * string) = Pp.str (snd s)
}

ARGUMENT EXTEND elpi_code
    PRINTED BY { pr_elpi_code }
| [ "xxxxxxx" ] -> { Elpi.API.Ast.Loc.initial "(dummy elpi code)", "" } (* XXX To be removed when maxime's patches get merged 
*)
END
{
let () = Coq_elpi_glob_quotation.is_elpi_code :=
           (fun x -> Genarg.(has_type x (glbwit wit_elpi_code)))
let () = Coq_elpi_glob_quotation.get_elpi_code :=
           (fun x -> Genarg.(out_gen (glbwit wit_elpi_code) x))

let pr_elpi_code_appArg _ _ _ (s : Elpi.API.Ast.Loc.t * string list) = Pp.prlist Pp.str (snd s)
}

ARGUMENT EXTEND elpi_code_appArg 
  PRINTED BY { pr_elpi_code_appArg } 
  | [ "xxxxxxx" ] -> { Elpi.API.Ast.Loc.initial "(dummy_elpi_appArg)", [] } (* XXX To be removed when maxime's patches get merged 
*)
END
{

let () = Coq_elpi_glob_quotation.is_elpi_code_appArg  :=
           (fun x -> Genarg.(has_type x (glbwit wit_elpi_code_appArg )))
let () = Coq_elpi_glob_quotation.get_elpi_code_appArg  :=
           (fun x -> Genarg.(out_gen (glbwit wit_elpi_code_appArg ) x))

}
GRAMMAR EXTEND Gram
  GLOBAL: term;

  term: LEVEL "0"
    [ [ s = QUOTATION "lp:" -> 
        { 
          let arg =
            if s.[0] = '('
            then Genarg.in_gen (Genarg.rawwit wit_elpi_code_appArg) (idents_of loc s)
            else if s.[0] = '\123'
            then Genarg.in_gen (Genarg.rawwit wit_elpi_code) (strip_curly loc s)
            else Genarg.in_gen (Genarg.rawwit wit_elpi_code) (Coq_elpi_utils.of_coq_loc loc,s) in
          CAst.make ~loc
            (Constrexpr.CHole (None, Namegen.IntroAnonymous, Some arg)) } ]
          ]
  ;
END

GRAMMAR EXTEND Gram
  GLOBAL: term;

  term: LEVEL "0"
    [ [ "lib"; ":"; id = qualified_name -> {
          let ref = Coqlib.lib_ref (String.concat "." (snd id)) in
          let path = Nametab.path_of_global ref in
          CAst.make ~loc Constrexpr.(CRef (Libnames.qualid_of_path ~loc:(fst id) path,None)) }
      | "lib"; ":"; "@"; id = qualified_name -> {
          let ref = Coqlib.lib_ref (String.concat "." (snd id)) in
          let path = Nametab.path_of_global ref in
          let f = Libnames.qualid_of_path ~loc:(fst id) path in
          CAst.make ~loc Constrexpr.(CAppExpl((None,f,None),[])) } ] ]
  ;
END

(* Syntax **************************************************************** *)
{
let pr_glob_constr_and_expr = function
  | (_, Some c) ->
    let env = Global.env () in
    let sigma = Evd.from_env env in
    Ppconstr.pr_constr_expr env sigma c
  | (c, None) ->
    let env = Global.env () in
    let sigma = Evd.from_env env in
    Printer.pr_glob_constr_env env sigma c

let pp_elpi_arg _ _ _ = EV.pr_arg (fun (_,x) -> pr_glob_constr_and_expr x) (fun (_,r) -> Coq_elpi_goal_HOAS.pr_glob_record_decl r) (fun (_,r) -> Coq_elpi_goal_HOAS.pr_glob_indt_decl r) (fun (_,r) -> Coq_elpi_goal_HOAS.pr_glob_constant_decl r) (fun (_,x) -> Coq_elpi_goal_HOAS.pr_glob_context_decl x)
let pp_glob_elpi_arg _ _ _ = EV.pr_arg pr_glob_constr_and_expr Coq_elpi_goal_HOAS.pr_glob_record_decl Coq_elpi_goal_HOAS.pr_glob_indt_decl Coq_elpi_goal_HOAS.pr_glob_constant_decl  Coq_elpi_goal_HOAS.pr_glob_context_decl
let pp_raw_elpi_arg env sigma _ _ _ = EV.pr_arg (Ppconstr.pr_constr_expr env sigma) (EV.pr_expr_record_decl env sigma) (EV.pr_expr_indt_decl env sigma) (EV.pr_expr_constant_decl env sigma) (EV.pr_expr_context env sigma)

let glob_elpi_arg = EV.glob_arg
let interp_elpi_arg = EV.interp_arg
let subst_elpi_arg mod_subst = function
  | EV.Qualid _ as x -> x
  | EV.DashQualid _ as x -> x
  | EV.Int _ as x -> x
  | EV.String _ as x -> x
  | EV.Term t ->
      EV.Term (Tacsubst.subst_glob_constr_and_expr mod_subst t)
  | EV.RecordDecl t ->
      EV.RecordDecl (EV.subst_record_decl mod_subst t)
  | EV.IndtDecl t ->
      EV.IndtDecl (EV.subst_indt_decl mod_subst t)
  | EV.ConstantDecl t ->
      EV.ConstantDecl (EV.subst_constant_decl mod_subst t)
  | EV.Context t ->
      EV.Context (EV.subst_context_decl mod_subst t)

let record_fields = Pcoq.Entry.create "elpi:record_fields"
let telescope = Pcoq.Entry.create "elpi:telescope"
let colon_sort = Pcoq.Entry.create "elpi:colon_sort"
let colon_constr = Pcoq.Entry.create "elpi:colon_constr"
let pipe_telescope = Pcoq.Entry.create "elpi:pipe_telescope"
let inductive_constructors = Pcoq.Entry.create "elpi:inductive_constructors"

let any_attribute : Attributes.vernac_flags Attributes.attribute =
  Attributes.make_attribute (fun x -> [],x)

let coq_kwd_or_symbol = Pcoq.Entry.create "elpi:kwd_or_symbol"

let opt2list = function None -> [] | Some l -> l

let the_kwd = ref ""
let any_kwd _ strm =
  match Stream.peek strm with
  | Some (Tok.KEYWORD sym) when sym <> "." -> Stream.junk strm; the_kwd := sym
  | _ -> raise Stream.Failure
let any_kwd = Pcoq.Entry.of_parser "any_symbols_or_kwd" any_kwd
}

GRAMMAR EXTEND Gram
  GLOBAL: record_fields inductive_constructors telescope colon_sort colon_constr coq_kwd_or_symbol pipe_telescope;

  record_fields:
    [ [ f = G_vernac.record_field; ";"; fs = record_fields -> { f :: fs }
      | f = G_vernac.record_field -> { [f] }
      | -> { [] }
    ] ]
  ;

  inductive_constructors:
    [ [ "|"; l = LIST1 constructor SEP "|" -> { l }
      | id = identref ; c = constructor_type; "|"; l = LIST1 constructor SEP "|" -> { c id :: l }
    ] ]
  ;
  constructor:
    [ [ id = identref; c = constructor_type -> { c id } ] ]
  ;

  constructor_type:
    [[ l = binders;
       t = [ ":"; c = lconstr -> { fun l id -> id,Constrexpr_ops.mkProdCN ~loc l c }
           | -> { fun l id -> id,Constrexpr_ops.mkProdCN ~loc l (CAst.make ~loc @@ Constrexpr.CHole (None, Namegen.IntroAnonymous, None)) } ]
        -> { t l }
     ]]
  ;

  pipe_telescope:
    [ [ "|"; bl = binders -> { bl } ] ];

  telescope:
    [ [ bl = binders -> { bl } ] ];

  colon_sort:
    [ [ ":"; s = sort -> { s } ] ];

  colon_constr:
    [ [ ":"; s = lconstr -> { s } ] ];

  coq_kwd_or_symbol:
    [ [ any_kwd -> { !the_kwd }] ];
END

ARGUMENT EXTEND elpi_arg
PRINTED BY { pp_elpi_arg }
INTERPRETED BY { interp_elpi_arg }
GLOBALIZED BY { glob_elpi_arg }
SUBSTITUTED BY { subst_elpi_arg }
RAW_PRINTED BY { pp_raw_elpi_arg env sigma }
GLOB_PRINTED BY { pp_glob_elpi_arg }
| [ qualified_name(s) ] -> { EV.Qualid (snd s) }
| [ "-" qualified_name(s) ] -> { EV.DashQualid (snd s) }
| [ integer(n) ] -> { EV.Int n }
| [ "-" integer(n) ] -> { EV.Int (-n) }
| [ string(s) ] -> { EV.String s }
| [ "Inductive" qualified_name(name) telescope(ps) pipe_telescope_opt(nups) colon_constr_opt(s) ":=" inductive_constructors(cs) ] -> {
      EV.IndtDecl { EV.finiteness = Vernacexpr.Inductive_kw; name = snd name; arity = s; parameters = ps; non_uniform_parameters = opt2list nups; constructors = cs } }
| [ "CoInductive" qualified_name(name) telescope(ps) pipe_telescope_opt(nups) colon_constr_opt(s) ":=" inductive_constructors(cs) ] -> {
      EV.IndtDecl { EV.finiteness = Vernacexpr.CoInductive; name = snd name; arity = s; parameters = ps; non_uniform_parameters = opt2list nups; constructors = cs } }
| [ "Variant" qualified_name(name) telescope(ps) pipe_telescope_opt(nups) colon_constr_opt(s) ":=" inductive_constructors(cs) ] -> {
      EV.IndtDecl { EV.finiteness = Vernacexpr.Variant; name = snd name; arity = s; parameters = ps; non_uniform_parameters = opt2list nups; constructors = cs } }
| [ "Record" qualified_name(name) telescope(ps) colon_sort_opt(s) ":=" ident_opt(k) "{" record_fields(fs) "}" ] -> {
      EV.RecordDecl { EV.name = snd name; sort = s; parameters = ps; constructor = k; fields = fs } }
| [ "Class" qualified_name(name) telescope(ps) colon_sort_opt(s) ":=" ident_opt(k) "{" record_fields(fs) "}" ] -> {
      EV.RecordDecl { EV.name = snd name; sort = s; parameters = ps; constructor = k; fields = fs } }
| [ "Definition" qualified_name(name) telescope(typ) colon_constr_opt(t) ":=" lconstr(b) ] -> {
      EV.ConstantDecl { EV.name = snd name; typ = (typ,t); body = Some b } }
| [ "Axiom" qualified_name(name) telescope(typ) colon_constr(t) ] -> {
      EV.ConstantDecl { EV.name = snd name; typ = (typ,Some t); body = None } }
| [ "Context" telescope(ty) ] -> { EV.Context ty }
| [ "(" lconstr(t) ")" ] -> { EV.Term t }

| [ coq_kwd_or_symbol(x) ] -> { EV.String x }
END

ARGUMENT EXTEND elpi_tactic_arg
PRINTED BY { pp_elpi_arg }
INTERPRETED BY { interp_elpi_arg }
GLOBALIZED BY { glob_elpi_arg }
SUBSTITUTED BY { subst_elpi_arg }
RAW_PRINTED BY { pp_raw_elpi_arg env sigma }
GLOB_PRINTED BY { pp_glob_elpi_arg }
| [ qualified_name(s) ] -> { EV.Qualid (snd s) }
| [ "-" qualified_name(s) ] -> { EV.DashQualid (snd s) }
| [ integer(n) ] -> { EV.Int n }
| [ "-" integer(n) ] -> { EV.Int (-n) }
| [ string(s) ] -> { EV.String s }
| [ "(" lconstr(t) ")" ] -> { EV.Term t }
END

VERNAC COMMAND EXTEND Elpi CLASSIFIED AS SIDEFF
| [ "Elpi" "Accumulate" "File" string_list(s) ] -> { EV.accumulate_files s }
| [ "Elpi" "Accumulate" "Files" string_list(s) ] -> { EV.accumulate_files s }
| [ "Elpi" "Accumulate" elpi_string(s) ] -> { EV.accumulate_string s }
| [ "Elpi" "Accumulate" qualified_name(p) "File" string_list(s) ] ->
  { EV.accumulate_files ~program:(snd p) s }
| [ "Elpi" "Accumulate" qualified_name(p) "Files" string_list(s) ] ->
  { EV.accumulate_files ~program:(snd p) s }
| [ "Elpi" "Accumulate" qualified_name(p) elpi_string(s) ] ->
  { EV.accumulate_string ~program:(snd p) s }
| [ "Elpi" "Accumulate" "Db" qualified_name(d) ] -> { EV.accumulate_db (snd d) }
| [ "Elpi" "Accumulate" qualified_name(p) "Db" qualified_name(d) ] ->
  { EV.accumulate_db ~program:(snd p) (snd d) }

| [ "Elpi" "Debug" string_list(s) ] -> { EV.debug s }
| [ "Elpi" "Trace" string_list(s) ] -> { EV.trace 1 max_int s [] }
| [ "Elpi" "Trace" string_list(s) "/" string_list(o) ] -> { EV.trace 1 max_int s o }
| [ "Elpi" "Trace" int(start) int(stop) string_list(s) ] -> { EV.trace start stop s [] }
| [ "Elpi" "Trace" int(start) int(stop) string_list(s) "/" string_list(o) ] -> { EV.trace start stop s o }

| [ "Elpi" "Trace" "Off" ] -> { EV.trace 0 0 [] [] }
| [ "Elpi" "Bound" "Steps" int(steps) ] -> { EV.bound_steps steps }

| [ "Elpi" "Print" qualified_name(p) string_list(s) ] -> { EV.print (snd p) s }

| [ "Elpi" "Program" qualified_name(p) elpi_string(s) ] ->
    { EV.create_program p ~init:s }
| [ "Elpi" "Command" qualified_name(p) ] ->
    { EV.create_command p }
| [ "Elpi" "Tactic" qualified_name(p) ] ->
    { EV.create_tactic p }
| [ "Elpi" "Db" qualified_name(d) elpi_string(s) ] ->
    { EV.create_db d ~init:s }

| [ "Elpi" "Query" elpi_string(s) ] ->
    { EV.run_in_program s }
| [ "Elpi" "Query"  qualified_name(p) elpi_string(s) ] ->
    { EV.run_in_program ~program:(snd p) s }

| [ "Elpi" "Typecheck" ] -> { EV.typecheck_program () }
| [ "Elpi" "Typecheck" qualified_name(p) ] -> { EV.typecheck_program ~program:(snd p) () }

| [ "Elpi" "Document" "Builtins" ] -> { EV.document_builtins () }
| [ "Elpi" "Checker" string(s) ] -> { EV.load_checker s }
| [ "Elpi" "Printer" string(s) ] -> { EV.load_printer s }
| [ "Elpi" "Template" "Command" string(s) ] -> { EV.load_command s }
| [ "Elpi" "Template" "Tactic" string(s) ] -> { EV.load_tactic s }

| [ "Elpi" "Export" qualified_name(p) ] => { Vernacextend.(VtSideff ([],VtNow)) } -> {
    EV.export_command (snd p) (Genarg.get_arg_tag wit_elpi_loc) (Genarg.get_arg_tag wit_elpi_arg)
  }

| #[ atts = any_attribute ]
  [ "Elpi" qualified_name(p) elpi_arg_list(args) ] ->
    { EV.run_program (fst p) (snd p) ~atts args }
END

TACTIC EXTEND elpi_tac
| [ "elpi" qualified_name(p) elpi_tactic_arg_list(args) ] ->
  { EV.run_tactic (fst p) (snd p) ist args }
| [ "elpi" "query" elpi_string(s) elpi_tactic_arg_list(args) ] ->
  { EV.run_in_tactic s ist args }
| [ "elpi" "query"  qualified_name(p) elpi_string(s) elpi_tactic_arg_list(args) ] ->
  { EV.run_in_tactic s ~program:(snd p) ist args }
END

(* vim:set ft=ocaml: *)
