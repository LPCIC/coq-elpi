(* coq-elpi: Coq terms as the object language of elpi                        *)
(* license: GNU Lesser General Public License Version 2.1 or later           *)
(* ------------------------------------------------------------------------- *)

DECLARE PLUGIN "coq-elpi.elpi"

{

open Stdarg
open Ltac_plugin

open Pcoq.Constr

open Coq_elpi_arg_syntax
module EV = Coq_elpi_vernacular
module EA = Coq_elpi_arg_HOAS
module U = Coq_elpi_utils

}

(* Anti-quotation ******************************************************** *)

{
let pr_elpi_code _ _ _ (s : Elpi.API.Ast.Loc.t * string) = Pp.str (snd s)
}

ARGUMENT EXTEND elpi_code
    PRINTED BY { pr_elpi_code }
END
{
let () = Coq_elpi_glob_quotation.is_elpi_code :=
           (fun x -> Genarg.(has_type x (glbwit wit_elpi_code)))
let () = Coq_elpi_glob_quotation.get_elpi_code :=
           (fun x -> Genarg.(out_gen (glbwit wit_elpi_code) x))

let pr_elpi_code_appArg _ _ _ (s : Elpi.API.Ast.Loc.t * string list) = Pp.prlist Pp.str (snd s)
}

ARGUMENT EXTEND elpi_code_appArg 
  PRINTED BY { pr_elpi_code_appArg } 
END
{

let () = Coq_elpi_glob_quotation.is_elpi_code_appArg  :=
           (fun x -> Genarg.(has_type x (glbwit wit_elpi_code_appArg )))
let () = Coq_elpi_glob_quotation.get_elpi_code_appArg  :=
           (fun x -> Genarg.(out_gen (glbwit wit_elpi_code_appArg ) x))

let rec inlogpath q = function
  | [] -> []
  | x :: xs -> ("coq://" ^ Libnames.string_of_qualid q ^ "/" ^ x) :: inlogpath q xs

let warning_legacy_accumulate_gen =
  CWarnings.create ~name:"elpi.accumulate-syntax" ~category:Coq_elpi_utils.elpi_depr_cat (fun has_from ->
      if has_from then
        Pp.strbrk "The syntax 'Elpi Accumulate File \"path\"' is deprecated, use 'Elpi Accumulate File \"path\" From logpath'"
      else Pp.strbrk "The syntax 'Elpi Accumulate File \"path\" From logpath' is deprecated, use 'From logpath Extra Dependency \"path\" as name. Elpi Accumulate File name.'")

let warning_legacy_accumulate ?loc () = warning_legacy_accumulate_gen ?loc true
let warning_legacy_accumulate2 ?loc () = warning_legacy_accumulate_gen ?loc false

}
GRAMMAR EXTEND Gram
  GLOBAL: term;

  term: LEVEL "0"
    [ [ s = QUOTATION "lp:" -> 
        { 
          let arg =
            if s.[0] = '('
            then Genarg.in_gen (Genarg.rawwit wit_elpi_code_appArg) (idents_of loc s)
            else if s.[0] = '\123'
            then Genarg.in_gen (Genarg.rawwit wit_elpi_code) (strip_curly loc s)
            else Genarg.in_gen (Genarg.rawwit wit_elpi_code) (Coq_elpi_utils.of_coq_loc loc,s) in
          CAst.make ~loc
            (Constrexpr.CGenarg arg) } ]
    ]
  ;
END

GRAMMAR EXTEND Gram
  GLOBAL: term;

  term: LEVEL "0"
    [ [ "lib"; ":"; id = qualified_name -> {
          let ref = Coqlib.lib_ref (String.concat "." (snd id)) in
          let path = Nametab.path_of_global ref in
          CAst.make ~loc Constrexpr.(CRef (Libnames.qualid_of_path ~loc:(fst id) path,None)) }
      | "lib"; ":"; "@"; id = qualified_name -> {
          let ref = Coqlib.lib_ref (String.concat "." (snd id)) in
          let path = Nametab.path_of_global ref in
          let f = Libnames.qualid_of_path ~loc:(fst id) path in
          CAst.make ~loc Constrexpr.(CAppExpl((f,None),[])) } ] ]
  ;
END

(* Syntax **************************************************************** *)

VERNAC COMMAND EXTEND Elpi CLASSIFIED AS SIDEFF
| #[ atts = skip_attribute ] [ "Elpi" "Accumulate" "File" ne_ident_list(ids) ] -> {
     EV.skip ~atts EV.accumulate_extra_deps ids }
| #[ atts = skip_attribute ] [ "Elpi" "Accumulate" "Files" ne_ident_list(ids) ] -> {
     EV.skip ~atts EV.accumulate_extra_deps ids }
| #[ atts = skip_attribute ] [ "Elpi" "Accumulate" qualified_name(p) "File" ne_ident_list(ids) ] -> {
     EV.skip ~atts (EV.accumulate_extra_deps ~program:(snd p)) ids }
| #[ atts = skip_attribute ] [ "Elpi" "Accumulate" qualified_name(p) "Files" ne_ident_list(ids) ] -> {
     EV.skip ~atts (EV.accumulate_extra_deps ~program:(snd p)) ids }

| #[ atts = any_attribute ] [ "Elpi" "Accumulate" "File" string_list(s) ] -> { warning_legacy_accumulate ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts EV.accumulate_files s }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" "File" string_list(s) "From" global(g) ] -> { warning_legacy_accumulate2 ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts EV.accumulate_files (inlogpath g s) }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" "Files" string_list(s) ] -> { warning_legacy_accumulate ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts EV.accumulate_files s }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" "Files" string_list(s) "From" global(g) ] -> { warning_legacy_accumulate2 ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts EV.accumulate_files (inlogpath g s) }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" elpi_string(s) ] -> {
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts EV.accumulate_string s }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" qualified_name(p) "File" string_list(s) ] -> { warning_legacy_accumulate ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts (EV.accumulate_files ~program:(snd p)) s }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" qualified_name(p) "File" string_list(s) "From" global(g) ] -> { warning_legacy_accumulate2 ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts (EV.accumulate_files ~program:(snd p)) (inlogpath g s) }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" qualified_name(p) "Files" string_list(s) ] -> { warning_legacy_accumulate ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts (EV.accumulate_files ~program:(snd p)) s }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" qualified_name(p) "Files" string_list(s) "From" global(g) ] -> { warning_legacy_accumulate2 ();
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts (EV.accumulate_files ~program:(snd p)) (inlogpath g s) }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" qualified_name(p) elpi_string(s) ] -> {
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts (EV.accumulate_string ~program:(snd p)) s }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" "Db" qualified_name(d) ] -> {
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts EV.accumulate_db (snd d) }
| #[ atts = any_attribute ] [ "Elpi" "Accumulate" qualified_name(p) "Db" qualified_name(d) ] -> {
     let atts = validate_attributes skip_attribute atts in
     EV.skip ~atts (EV.accumulate_db ~program:(snd p)) (snd d) }

| #[ atts = any_attribute ] [ "Elpi" "Debug" string_list(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.debug s }
| #[ atts = any_attribute ] [ "Elpi" "Trace" "Browser" string_list(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.trace_browser s }
| #[ atts = any_attribute ] [ "Elpi" "Trace" string_list(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.trace 1 max_int s [] }
| #[ atts = any_attribute ] [ "Elpi" "Trace" string_list(s) "/" string_list(o) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.trace 1 max_int s o }
| #[ atts = any_attribute ] [ "Elpi" "Trace" int(start) int(stop) string_list(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.trace start stop s [] }
| #[ atts = any_attribute ] [ "Elpi" "Trace" int(start) int(stop) string_list(s) "/" string_list(o) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.trace start stop s o }

| #[ atts = any_attribute ] [ "Elpi" "Trace" "Off" ] -> {
     let () = ignore_unknown_attributes atts in
     EV.trace 0 0 [] [] }
| #[ atts = any_attribute ] [ "Elpi" "Bound" "Steps" int(steps) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.bound_steps steps }

| #[ atts = any_attribute ] [ "Elpi" "Print" qualified_name(p) string_list(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.print (snd p) s }

| #[ atts = any_attribute ] [ "Elpi" "Program" qualified_name(p) elpi_string(s) ] -> {
     let raw_args = validate_attributes raw_args_attribute atts in
     EV.create_program ?raw_args p ~init:s }
| #[ atts = any_attribute ] [ "Elpi" "Command" qualified_name(p) ] -> {
     let raw_args = validate_attributes raw_args_attribute atts in
     EV.create_command ?raw_args p }
| #[ atts = any_attribute ] [ "Elpi" "Tactic" qualified_name(p) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.create_tactic p }
| #[ atts = any_attribute ] [ "Elpi" "Db" qualified_name(d) elpi_string(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.create_db d ~init:s }

| #[ atts = any_attribute ] [ "Elpi" "Typecheck" ] -> {
     let () = ignore_unknown_attributes atts in
     EV.typecheck_program () }
| #[ atts = any_attribute ] [ "Elpi" "Typecheck" qualified_name(p) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.typecheck_program ~program:(snd p) () }

| #[ atts = any_attribute ] [ "Elpi" "Document" "Builtins" ] -> {
     let () = ignore_unknown_attributes atts in
     EV.document_builtins () }
| #[ atts = any_attribute ] [ "Elpi" "Checker" string(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.load_checker s }
| #[ atts = any_attribute ] [ "Elpi" "Printer" string(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.load_printer s }
| #[ atts = any_attribute ] [ "Elpi" "Template" "Command" string(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.load_command s }
| #[ atts = any_attribute ] [ "Elpi" "Template" "Tactic" string(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.load_tactic s }

| #[ atts = any_attribute ] [ "Elpi" "Coercion" qualified_name(p) ] -> {
     let () = ignore_unknown_attributes atts in
     Coq_elpi_vernacular.add_coercion_hook (snd p) }
| #[ atts = any_attribute ] [ "Elpi" "Disable" "Coercion" ] -> {
     let () = ignore_unknown_attributes atts in
     Coq_elpi_vernacular.disable_coercion_hook () }

END

VERNAC COMMAND EXTEND ElpiRun CLASSIFIED BY { fun _ -> Vernacextend.(VtSideff ([], VtNow)) }
| #[ atts = any_attribute ] [ "Elpi" "Query" elpi_string(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.run_in_program s }
| #[ atts = any_attribute ] [ "Elpi" "Query"  qualified_name(p) elpi_string(s) ] -> {
     let () = ignore_unknown_attributes atts in
     EV.run_in_program ~program:(snd p) s }
| #[ atts = any_attribute ] [ "Elpi" "Export" qualified_name(p) ] => { Vernacextend.(VtSideff ([],VtNow)) } -> {
     let () = ignore_unknown_attributes atts in
     EV.export_command (snd p) }
| #[ atts = any_attribute ] [ "Elpi" qualified_name(p) elpi_cmd_arg_list(args) ] -> {
     EV.run_program (fst p) (snd p) ~atts args }
END

TACTIC EXTEND elpi_tac
| [ "elpi" qualified_name(p) elpi_tactic_arg_list(args) ] ->
  { EV.run_tactic (fst p) (snd p) ~atts:[] ist args }
| [ "ltac_attributes" ":" "(" ltac_attributes(atts) ")" "elpi" qualified_name(p) elpi_tactic_arg_list(args) ] ->
  { EV.run_tactic (fst p) (snd p) ~atts ist args }
| [ "#[" attributes(atts) "]" "elpi" qualified_name(p) elpi_tactic_arg_list(args) ] ->
  { EV.run_tactic (fst p) (snd p) ~atts ist args }
| [ "elpi" "query" elpi_string(s) ] ->
  { EV.run_in_tactic s ist }
| [ "elpi" "query"  qualified_name(p) elpi_string(s) ] ->
  { EV.run_in_tactic s ~program:(snd p) ist }
END

(* vim:set ft=ocaml: *)
