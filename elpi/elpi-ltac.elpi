/* elpi-ltac: building blocks for tactics                                    */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */
typeabbrev tactic (sealed-goal -> (list sealed-goal -> prop)).
typeabbrev open-tactic (goal -> (list sealed-goal -> prop)).

% The one tactic ------------------------------------------------------------
pred refine i:term, i:goal, o:list sealed-goal.
refine T G GS :- refine.elaborate T G GS.

pred refine.elaborate i:term, i:goal, o:list sealed-goal.
refine.elaborate T (goal _ RawEv _ Ev _) GS :-
  RawEv = T, coq.ltac.collect-goals Ev GS _.

pred refine.typecheck i:term, i:goal, o:list sealed-goal.
refine.typecheck T (goal _ _ Ty Ev _) GS :-
  coq.typecheck T Ty ok,
  Ev = T, coq.ltac.collect-goals Ev GS _.

pred refine.no_check i:term, i:goal, o:list sealed-goal.
refine.no_check T (goal _ _ _ Ev _) GS :-
  Ev = T, coq.ltac.collect-goals Ev GS _.

% calling other tactics, with arguments ---------------------------------------

pred coq.ltac i:string, i:sealed-goal, o:list sealed-goal.
coq.ltac Tac G GS :- coq.ltac.open (coq.ltac.call-ltac1 Tac) G GS.

namespace coq.ltac {

pred call i:string, i:list argument, i:goal, o:list sealed-goal.
call Tac Args G GS :-
  set-goal-arguments Args G (seal G) (seal G1),
  coq.ltac.call-ltac1 Tac G1 GS.

pred set-goal-arguments i:list argument, i:goal, i:sealed-goal, o:sealed-goal.
set-goal-arguments A G (nabla SG) (nabla R) :- pi x\ set-goal-arguments A G (SG x) (R x).
set-goal-arguments A (goal Ctx1 _ _ _ _) (seal (goal Ctx2 REv2 Ty2 Ev2 _)) (seal (goal Ctx2 REv2 Ty2 Ev2 I)) :-
  std.map A (private.move-goal-argument Ctx1 Ctx2) I.

% Tacticals ----------------------------------------------------------------

pred try i:tactic, i:sealed-goal, o:list sealed-goal.
try T G GS :- T G GS.
try _ G [G].

:index(_ 1)
pred then i:tactic, i:list sealed-goal, o:list sealed-goal.
then T [G|Gs] O :- T G O1, then T Gs O2, std.append O1 O2 O.
then _ [] [].

pred thenl i:list tactic, i:sealed-goal, o:list sealed-goal.
thenl [] G [G].
thenl [T|Ts] G GS :- T G NG, then (thenl Ts) NG GS.

pred repeat i:tactic, i:sealed-goal, o:list sealed-goal.
repeat T G GS :- T G GS1, then (repeat T) GS1 GS.
repeat _ G [G].

pred repeat! i:tactic, i:sealed-goal, o:list sealed-goal.
repeat! T G GS :- T G GS1, !, then (repeat T) GS1 GS.
repeat! _ G [G].

pred or i:list tactic, i:sealed-goal, o:list sealed-goal.
or TL G GS :- std.exists TL (t\ t G GS).

:index(_ 1)
pred open i:open-tactic, i:sealed-goal, o:list sealed-goal.
open T (nabla G) O :- (pi x\ open T (G x) (NG x)), private.distribute-nabla NG O.
open _ (seal (goal _ _ _ Solution _)) [] :- not (var Solution), !. % solved by side effect
open T (seal (goal Ctx _ _ _ _ as G)) O :-
  std.filter Ctx private.not-already-assumed Ctx1,
  Ctx1 => T G O,
  if (var O)
     (G = goal _ _ _ P _, coq.ltac.collect-goals P O1 O2, std.append O1 O2 O)
     true.

% helper code ---------------------------------------------------------------

namespace private {

:index(_ _ 1)
pred move-goal-argument i:list prop, i:list prop, i:argument, o:argument.
move-goal-argument _ _ (int _ as A) A.
move-goal-argument _ _ (str _ as A) A.
move-goal-argument C D (trm T) (trm T1) :-
  std.assert! (move-term C D T T1) "cannot move goal argument to the right context", !.

pred move-term i:list prop, i:list prop, i:term, o:term.
move-term [] _ T T1 :- copy T T1.
move-term [decl X _ TX|C1] [decl Y _ TY|C2] T T1 :- same_term TX TY, !,
  copy X Y => move-term C1 C2 T T1.

pred distribute-nabla i:(term -> list sealed-goal), o:list sealed-goal.
distribute-nabla (_\ []) [].
distribute-nabla (x\ [X x| XS x]) [nabla X|R] :- (pi x\ occurs x (X x)), !,
  distribute-nabla XS R.
distribute-nabla (x\ [X| XS x]) [X|R] :- distribute-nabla XS R.

pred not-already-assumed i:prop.
not-already-assumed (decl X _ _Ty) :- not(decl X _ _ ; def X _ _ _).
not-already-assumed (def X _ _Ty _Bo) :- not(decl X _ _ ; def X _ _ _).

}}