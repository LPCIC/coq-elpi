/* coq-elpi: Coq terms as the object language of elpi                        */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{fatal-error, fatal-error-w-data, debug-print, unsafe-cast}.
shorten std.{rev, map, append, appendR, map2, forall, take}.

:before "default-fatal-error"
fatal-error Msg :- !, M is "elpi: " ^ Msg, coq.say M, stop.

:before "default-fatal-error-w-data"
fatal-error-w-data Msg Data :- !, M is "elpi: " ^ Msg, coq.say M ":" Data, stop.

:before "default-debug-print"
debug-print Msg Data :- !, M is "elpi: " ^ Msg, coq.say M Data.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Helpers
%
% Pure LP code that works with the data types and API above.
% Named clauses are natural extension points, eg one can extend
% subst-prod to perform reduction in order to expose a "prod" node.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Term surgery %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred  subst-prod i:list term, i:term, o:term.
subst-prod [] P P :- !.
subst-prod [X|XS] (prod _ _ F) P :- !, subst-prod XS (F X) P.
subst-prod XS (let _ _ X F) P :- !, subst-prod XS (F X) P.
:name "subst-prod:fail"
subst-prod [_|_] T _ :- !,
  fatal-error-w-data "subst-prod: not a product" T.

pred subst-fun i:list term, i:term, o:term.
subst-fun [] T T :- !.
subst-fun [X|XS] (fun _ _ F) T :- !, subst-fun XS (F X) T.
subst-fun XS (let _ _ X F) T :- !, subst-fun XS (F X) T.
:name "subst-fun:fail"
subst-fun [_|_] T _ :- !, 
  fatal-error-w-data "subst-fun: not a lambda" T.

pred prod-R-fun o:term, o:term.
prod-R-fun (prod N T F) (fun N T R) :- !, pi x\ prod-R-fun (F x) (R x).
prod-R-fun (let N T B F) (let N T B R) :- !, pi x\ prod-R-fun (F x) (R x).
prod-R-fun X X.

pred prod->fun i:term, o:term.
prod->fun (prod N T F) (fun N T R) :- !, pi x\ prod->fun (F x) (R x).
prod->fun (let N T B F) (let N T B R) :- !, pi x\ prod->fun (F x) (R x).
prod->fun X X.

pred count-prods i:term, o:int.
count-prods (prod _ _ B) N :- !, (pi x\ count-prods (B x) M), N is M + 1.
count-prods (let _ _ _ B) N :- !, (pi x\ count-prods (B x) N).
:name "count-prod:end"
count-prods _ 0 :- !.

pred safe-dest-app i:term, o:term, o:list term.
safe-dest-app (app [X|XS]) HD AllArgs :- !,
  safe-dest-app X HD ARGS, append ARGS XS AllArgs.
safe-dest-app X X [].

pred mk-app i:term, i:list term, o:term.
mk-app HD [] HD :- !.
mk-app (app L) Args (app LArgs) :- !, append L Args LArgs.
mk-app (fun _ _ F) [A|Args] R :- !, mk-app (F A) Args R.
mk-app (let _ _ A F) Args R :- !, mk-app (F A) Args R.
mk-app HD Args (app [HD|Args]).

pred mk-app-uvar i:term, i:list term, o:term.
mk-app-uvar HD [] HD :- !.
mk-app-uvar (uvar as K) [A|Args] R :- !, unsafe-cast K K', mk-app-uvar (K' A) Args R.

% mk-eta n Ty T: performs up to n (when >= 0) eta expasion of T
% according to its type Ty. If n < 0 it makes as many step as
% products in Ty. There be dragons if T has not type Ty.
pred mk-eta i:int, i:term, i:term, o:term.
mk-eta 0 _ B B :- !.
mk-eta N (prod Name Ty P) (fun _ _ F) (fun Name Ty F1) :- !, N1 is N - 1,
  pi x \ mk-eta N1 (P x) (F x) (F1 x).
mk-eta N (prod Name Ty P) B           (fun Name Ty B1) :- !, N1 is N - 1,
  pi x \ mk-eta N1 (P x) {mk-app B [x]} (B1 x).
:name "mk-eta:end"
mk-eta _ _ B B :- !.

% copy can be used to perform a replacement, eg
%   (copy (const "foo") (const "bar) :- !) => copy T T1
% traverses T replacing foo with bar.
pred copy i:term, o:term.
:name "copy:start"
copy X Y :- name X, !, X = Y, !. % avoid loading "copy x x" at binders
copy (global _ as C) C :- !.
copy (sort _ as C) C :- !.
copy (fun N T F) (fun N T1 F1) :- !,
  copy T T1, pi x\ copy (F x) (F1 x).
copy (let N T B F) (let N T1 B1 F1) :- !,
  copy T T1, copy B B1, pi x\ copy (F x) (F1 x).
copy (prod N T F) (prod N T1 F1) :- !,
  copy T T1, (pi x\ copy (F x) (F1 x)).
copy (app L) (app L1) :- !, map L copy L1.
copy (fix N Rno Ty F) (fix N Rno Ty1 F1) :- !,
  copy Ty Ty1, pi x\ copy (F x) (F1 x).
copy (match T Rty B) (match T1 Rty1 B1) :- !,
  copy T T1, copy Rty Rty1, map B copy B1.
copy (uvar M L as X) W :- var X, !, map L copy L1, mk-app-uvar M L1 W.
% when used in CHR rules
copy (uvar X L) (uvar X L1) :- map L copy L1.

pred copy-ctx-item i:prop, o:prop.
copy-ctx-item (decl X N T) (decl X1 N T1) :- copy X X1, copy T T1.
copy-ctx-item (def X N T B) (def X1 N T1 B1) :-
  copy X X1, copy T T1, copy B B1.

% Bridges the gap between the data types used to read/write inductives.
% The arguments are the same of coq.env.indt plus an an extra one being
% the output (of type indt-decl).
% FIXME: record

pred coq.env.indt->decl
  i:(pair @inductive @id), i:bool, i:int, i:int, i:term, i:list (pair @constructor @id), i:list term, o:indt-decl.

coq.env.indt->decl GR IsInd Pno UPno Arity Kns Ktys Decl :-
  coq.env.indt->decl-aux GR IsInd Pno UPno Arity Kns Ktys [] Decl.

pred coq.env.indt->decl-aux
  i:pair @inductive @id, i:bool, i:int, i:int, i:term, i:list (pair @constructor @id), i:list term, i:list term, o:indt-decl.
coq.env.indt->decl-aux (pr GR I) IsInd NUPno 0 Arity Kns Ktys Params Result :- !,
  if (IsInd = tt) (Result =   inductive I NUPno Arity Ks)
                  (Result = coinductive I NUPno Arity Ks),
  rev Params ParamsR,
  (pi i\ Sub i = [ % we factor uniform parameters
     (pi x l\ copy (app[global (indt GR)|l]) (app[i|x]):- !, appendR ParamsR x l),
     (copy (global (indt GR)) i :- !) ]),
  pi i\
    map2 Kns Ktys (gr_name\ ty\ res\
      sigma tmp name\
      Sub i => copy ty tmp,
      gr_name = pr _ name,
      res = constructor name tmp)
    (Ks i).

coq.env.indt->decl-aux GR IsInd Pno UPno (prod N S T) Kns Ktys Params (parameter N S Res) :- Pno > 0, UPno > 0, !,
  Pno1 is Pno - 1,
  UPno1 is UPno - 1,
  pi p\
    map Ktys (subst-prod [p]) (Ktys1 p),
    coq.env.indt->decl-aux GR IsInd Pno1 UPno1 (T p) Kns (Ktys1 p) [p|Params] (Res p).

:name "coq.env.indt->decl-aux:fail"
coq.env.indt->decl-aux _ _ _ _ _ _ _ _ _ :- !,
  fatal-error "coq.env.indt->decl-aux: invalid declaration".

% Lifts coq.elaborate to inductive declarations
% FIXME: do non-uniform parameters count wrt type levels?
% FIXME: record
pred coq.elaborate-indt-decl i:indt-decl, o:indt-decl.
coq.elaborate-indt-decl (parameter N T Decl) (parameter N T1 Decl1) :-
  coq.elaborate T _ T1,
  pi x\ decl x N T1 => coq.elaborate-indt-decl (Decl x) (Decl1 x).
coq.elaborate-indt-decl (inductive ID NU A KDecl) (inductive ID NU A1 KDecl1) :-
  coq.elaborate A _ A1,
  pi i\ decl i `i` A1 => map (KDecl i) (coq.elaborate-indt-decl-c A1) (KDecl1 i).
coq.elaborate-indt-decl (coinductive ID NU A KDecl) (coinductive ID NU A1 KDecl1) :-
  coq.elaborate A _ A1,
  pi i\ decl i `i` A1 => map (KDecl i) (coq.elaborate-indt-decl-c A1) (KDecl1 i).
pred coq.elaborate-indt-decl-c i:term, i:indc-decl, o:indc-decl.
coq.elaborate-indt-decl-c S (constructor ID T) (constructor ID T1) :-
  coq.elaborate T S1 T1,
  arity->sort S IS,
  arity->sort S1 KS, 
  if (IS = typ U1, KS = typ U2) (coq.univ.leq U2 U1) true.

% Lifts coq.typecheck to inductive declarations
% FIXME: do non-uniform parameters count wrt type levels?
pred coq.typecheck-indt-decl i:indt-decl.
coq.typecheck-indt-decl (parameter N T Decl) :-
  coq.typecheck T _,
  pi x\ decl x N T => coq.typecheck-indt-decl (Decl x).
coq.typecheck-indt-decl (inductive _ID _NU A KDecl) :-
  coq.typecheck A _,
  pi i\ decl i `i` A => forall (KDecl i) (coq.typecheck-indt-decl-c A).
coq.typecheck-indt-decl (coinductive _ID _NU A KDecl) :-
  coq.typecheck A _,
  pi i\ decl i `i` A => forall (KDecl i) (coq.typecheck-indt-decl-c A).
coq.typecheck-indt-decl (record _ID A _IDK FDecl) :-
  coq.typecheck A _,
  pi i\ decl i `i` A => (
    coq.typecheck-indt-decl-field i FDecl (K i),
    coq.typecheck-indt-decl-c A (constructor "fields" (K i))
  ).

pred coq.typecheck-indt-decl-c i:term, i:indc-decl.
coq.typecheck-indt-decl-c S (constructor _ID T) :-
  coq.typecheck T S1,
  arity->sort S IS,
  arity->sort S1 KS, 
  if (IS = typ U1, KS = typ U2) (coq.univ.leq U2 U1) true.

pred coq.typecheck-indt-decl-field i:term, i:record-decl, o:term.
coq.typecheck-indt-decl-field I end-record I.
coq.typecheck-indt-decl-field I (field _ _ID T F) (prod `a` T F1) :-
  pi a\ coq.typecheck-indt-decl-field I (F a) (F1 a).

% extracts the sort at the end of an arity
pred arity->sort i:term, o:universe.
arity->sort (prod _ _ X) Y :- !, pi x\ arity->sort (X x) Y.
arity->sort (sort X) X :- !.
:name "arity->sort:fail"
arity->sort T _ :- fatal-error-w-data "arity->sort: not a sort or prod" T.

% extract gref from terms that happen to have one
pred term->gr i:term, o:gref.
term->gr (global GR) GR :- !.
term->gr (app [Hd|_]) GR :- !, term->gr Hd GR.
:name "term->gr:fail"
term->gr Term _ :-
  fatal-error-w-data "term->gr: input has no global reference" Term.

pred fresh-type o:term.
fresh-type (sort (typ U)) :- coq.univ.new [] U.

% Map the term under a spine of fun nodes
pred map-under-fun i:term,
  % InputTermUnderLams LamBoundVars TheirTypes Result
  i:(term -> list term -> list term -> term -> prop),
  o:term.
map-under-fun T F R :- map-under-fun.aux T [] [] F R.
map-under-fun.aux (fun N T B) AccT AccTy F (fun N T R) :- !,
  pi x\ decl x N T => map-under-fun.aux (B x) [x|AccT] [T|AccTy] F (R x).
map-under-fun.aux (let _ _ X B) AccT AccTy F R :- !,
  map-under-fun.aux (B X) AccT AccTy F R.
map-under-fun.aux End AccT AccTy F R :- F End {rev AccT} {rev AccTy} R.

pred iter-under-fun i:term,
  % InputTermUnderLams LamBoundVars TheirTypes
  i:(term -> list term -> list term -> prop).
iter-under-fun T F :- iter-under-fun.aux T [] [] F.
iter-under-fun.aux (fun N T B) AccT AccTy F :- !,
  pi x\ decl x N T => iter-under-fun.aux (B x) [x|AccT] [T|AccTy] F.
iter-under-fun.aux (let _ _ X B) AccT AccTy F :- !,
  iter-under-fun.aux (B X) AccT AccTy F.
iter-under-fun.aux End AccT AccTy F :- F End {rev AccT} {rev AccTy}.

% Build a match given the term and function to build the return type and the
% branches
pred build-match
  i:term, % T, the term being matched
  i:term, % the type of T, expected to be an inductive, eventually applied
  % MkRty: InputTermUnderLams LamBoundVars TheirTypes Result
  i:(term -> list term -> list term -> term -> prop),
  % MkBranch: Constructor ConstructorTyUnderLams LamBoundVars TheirTypes Result
  i:(term -> term -> list term -> list term -> term -> prop),
  o:term. % match T (.. MkRty) [ .. MkBranch K1, .. MkBranch K2, ..]
build-match T Tty RtyF BranchF (match T Rty Bs) :-
  whd Tty [] (global (indt GR)) Args,
  coq.env.indt GR _ Lno _ Arity Kn Kt,
  take Lno Args LArgs,
  mk-app (global (indt GR)) LArgs IndtLArgs,
  % Rty
  subst-prod LArgs Arity ArityArgs,
  bind-ind-arity IndtLArgs ArityArgs RtyF Rty,
  % Bs
  map Kt (subst-prod LArgs) KtArgs,
  map KtArgs prod->fun KtArgsLam,
  map Kn (k\ mk-app (global (indc k)) LArgs) KnArgs,
  map2 KnArgs KtArgsLam (k\t\map-under-fun t (BranchF k)) Bs.

% XXX the list of arguments are often needed in reverse order
pred bind-ind-arity % calls K under (fun Arity (x : Ity Arity) =>..)
  i:term, % the inductive type
  i:term, % the arity
  i:(term -> list term -> list term -> term -> prop), % Sort Vars Tys Out
  o:term. % 
bind-ind-arity.aux (prod N T B) (fun N T F) AccT AccTy IT K :- !,
  pi x\ decl x N T => bind-ind-arity.aux (B x) (F x) [x|AccT] [T|AccTy] IT K.
bind-ind-arity.aux (let _ _ X B) F AccT AccTy IT K :- !,
  bind-ind-arity.aux (B X) F AccT AccTy IT K.
bind-ind-arity.aux (sort _ as Sort) (fun `i` ITy F) AccT AccTy IT K :-
  rev AccT Vars,
  mk-app IT Vars ITy,
  pi x\ decl x `i` ITy => K Sort {append Vars [x]} {rev [ITy|AccTy]} (F x).
bind-ind-arity IT Arity F R :- bind-ind-arity.aux Arity R [] [] IT F.

% with-TC Class Instance->Clause Code: runs Code under a context augmented with
% all instances for Class transformed by Instance->Clause.
pred with-TC i:term, i:(tc-instance -> prop -> prop), i:prop.
with-TC Class Instance->Clause Code :-
  coq.TC.db-for {term->gr Class} Instances,
  map Instances Instance->Clause Hyps, !,
  Hyps => Code.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% vim:set ft=lprolog spelllang=:

