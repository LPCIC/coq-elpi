/* elpi-ltac: building blocks for tactics                                    */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{rev, append, exists, exists2, do!, flatten, map}.

pred evar->goal i:term, o:goal.
pred rawevar->evar i:term, o:term.


constraint declare-evar evar decl def evar->goal rawevar->evar rm-evar {

  rule (E1 : Ctx ?- evar (uvar RK RL as Y) Ty (uvar K L as X))
     \ (E2 : evar->goal (uvar K _) G)
     | (std.forall RL name, std.forall L name, build-goal RL Ctx Y Ty Goal)
    <=> (E2 : G = Goal).

  rule (evar _ _ _) \ (evar->goal (uvar K _) _) <=> (print_constraints, halt "not an evar:" K).

  % TODO: nabla close the solution for G
  rule (E1 : _ ?- evar (uvar R _) _ (uvar X _))
     \ (E2 : rawevar->evar (uvar R L) G)
     | (std.forall L name)
    <=> (E2 : G = (uvar X L)).

   rule (evar _ _ _) \ (rawevar->evar (uvar R _) _) <=> (print_constraints, halt "not a raw uvar:" R).

}

% [build-goal C L X Ty C G] builds in G a goal (sequent) for C |- X : T
% where L is the list of arguments to variable G
pred build-goal
  i:list term, % canonical names of the evar
  i:list prop, % context
  i:term,      % the evar (applied to the canonical names)
  i:term,      % type of the evar in the canonical context
  o:goal.

build-goal [] Ctx (uvar X L) T (goal Ctx2 (uvar X L1) T1 []) :-
  map L copy L1, copy T T1,
  std.filter Ctx (accessible-ctx-item L) Ctx1,
  Ctx1 = Ctx,
  map Ctx1 copy-ctx-item Ctx2.
build-goal [X|XS] Ctx Uv Ty (nabla R) :-
  pi x\ (copy X x :- !) => build-goal XS Ctx Uv Ty (R x).

pred accessible-ctx-item i:list term, i:prop.
accessible-ctx-item L (decl X _ _) :- std.mem! L X.
accessible-ctx-item L (def X _ _ _) :- std.mem! L X.

macro @tactic :- (goal -> (list goal -> prop)).

pred apply i:list goal, i:@tactic , o:list goal.
apply [G|Gs] Tac O :-
  enter G Tac O1, apply Gs Tac O2, append O1 O2 O.
apply [] _ [].

pred distribute i:(term -> list goal), o:list goal.
distribute (_\ []) [].
distribute (x\ [X x| XS x]) [nabla X|R] :- distribute XS R.

pred enter i:goal, i:@tactic, o:list goal.
enter (nabla G) T O :- (pi x\ enter (G x) T (NG x)), distribute NG O.
enter (goal _ _ _ _ as G) T O :- T G O.

pred collect-goals i:term, o:list goal. %@log (collect-goals T GS).
collect-goals (uvar as X) [G] :-
  declare_constraint (evar->goal X G) [X],
  if (var G) (print_constraints, halt "not a goal" X) true.
collect-goals (app L) GS :- map L collect-goals GSS, flatten GSS GS.
collect-goals (fun _ T F) GS :-
  collect-goals T GT,
  (pi x\ collect-goals (F x) GF),
  append GT GF GS.
collect-goals (prod _ T F) GS :-
  collect-goals T GT,
  (pi x\ collect-goals (F x) GF),
  append GT GF GS.
collect-goals (let _ T B F) GS :-
  collect-goals T GT,
  collect-goals B GB,
  (pi x\ collect-goals (F x) GF),
  append {append GT GB} GF GS.
collect-goals (global _) [].
collect-goals (sort _) [].
collect-goals (fix _ _ Ty Bo) GS :-
  collect-goals Ty GT,
  (pi f\ collect-goals (Bo f) GB),
  append GT GB GS.
collect-goals (match T P L) GS :-
  collect-goals T GT,
  collect-goals P GP,
  map L collect-goals GLL, flatten GLL GL,
  append GT {append GP GL} GS.
collect-goals N [] :- name N.

% XXX the term is type checked twice, of better first elaborated then
% assigned (hence re-checked)
pred refine i:term, i:goal, o:list goal.
refine RT (goal _ Ev _ _) GS :-
  declare_constraint (rawevar->evar Ev T) [Ev],
  Ev = RT,
  collect-goals T GS1,
  !, % FIXME: we want for sure a cut after collect-goals, but this one
     % also cuts multiple results for the "of RT..", not sure we want this
  GS = GS1.

pred assumption i:goal, o:list goal.
assumption (goal Ctx Ev _ _) [] :-
  exists Ctx (x\ (x = decl Ev _ _ ; x = def Ev _ _ _)).

pred constructor i:goal, o:list goal.
constructor (goal Ctx _ Ty _ as G) GS :- do! [
  Ctx => whd Ty [] (global (indt GR)) _,
  coq.env.indt GR _ _ _ _ Ks Kt,
  exists2 Ks Kt (k\ t\ sigma P\
    Ctx => saturate t (global (indc k)) P,
    refine P G GS)
].

pred intro i:@name, i:goal, o:list goal.
intro N G GS :- refine (fun N Src_ Tgt_) G GS.

pred saturate i:term, i:term, o:term.
saturate Ty T O :- whd Ty [] (prod _ _ Tgt) [], !, mk-app T [Hole_] R, pi x\ saturate (Tgt x) R O.
saturate _ X X.

pred try i:@tactic, i:goal, o:list goal.
try T G GS :- enter G T GS.
try _ G [G].

pred repeat i:@tactic, i:goal, o:list goal.
repeat T G GS :- enter G T GS1, apply GS1 (repeat T) GS.
repeat _ G [G].

pred repeat! i:@tactic, i:goal, o:list goal.
repeat! T G GS :- enter G T GS1, !, apply GS1 (repeat T) GS.
repeat! _ G [G].

pred or i:list @tactic, i:goal, o:list goal.
or TL G GS :- exists TL (t\ enter G t GS).

pred thenl i:list @tactic, i:goal, o:list goal.
thenl [] G [G].
thenl [T|Ts] G GS :- enter G T NG, apply NG (thenl Ts) GS.

% vim:set ft=lprolog spelllang=:

